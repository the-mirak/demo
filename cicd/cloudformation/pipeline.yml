AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Streamlit App CI/CD Pipeline'

Parameters:
  GitHubOwner:
    Type: String
    Description: GitHub repository owner
  
  GitHubRepo:
    Type: String
    Description: GitHub repository name
  
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub repository branch
  
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub OAuth token
  
  EksClusterName:
    Type: String
    Description: Name of the EKS cluster
  
  AWSRegion:
    Type: String
    Default: us-west-2
    Description: AWS Region for resources
    
  CreateECRRepository:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Whether to create a new ECR repository (set to false if it already exists)

Conditions:
  ShouldCreateECRRepository: !Equals [!Ref CreateECRRepository, 'true']

Resources:
  # Store GitHub token in Secrets Manager
  GitHubTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-github-token'
      Description: 'GitHub OAuth token for CodePipeline'
      SecretString: !Ref GitHubToken

  # Lambda execution role for the custom resource
  ECRCheckLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:DescribeRepositories'
                  - 'ecr:CreateRepository'
                  - 'ecr:PutLifecyclePolicy'
                Resource: '*'

  # Lambda function to check if ECR repository exists
  ECRCheckLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt ECRCheckLambdaRole.Arn
      Runtime: python3.9
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          
          def handler(event, context):
            try:
              # Extract properties from the event
              props = event['ResourceProperties']
              repository_name = props.get('RepositoryName', 'streamlit-app')
              lifecycle_policy = props.get('LifecyclePolicy', '')
              
              # Initialize ECR client
              ecr = boto3.client('ecr')
              
              # Check if we're creating, updating, or deleting
              if event['RequestType'] == 'Delete':
                # Don't delete the repository on stack deletion
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                return
              
              # Check if repository exists
              try:
                response = ecr.describe_repositories(repositoryNames=[repository_name])
                # Repository exists
                repository_uri = response['repositories'][0]['repositoryUri']
                
                # If updating, we could update the lifecycle policy here
                if event['RequestType'] == 'Update' and lifecycle_policy:
                  ecr.put_lifecycle_policy(
                    repositoryName=repository_name,
                    lifecyclePolicyText=lifecycle_policy
                  )
                
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                  'RepositoryUri': repository_uri,
                  'RepositoryName': repository_name,
                  'RepositoryExists': 'true'
                })
              except ecr.exceptions.RepositoryNotFoundException:
                # Repository doesn't exist, create it
                response = ecr.create_repository(repositoryName=repository_name)
                repository_uri = response['repository']['repositoryUri']
                
                # Apply lifecycle policy if provided
                if lifecycle_policy:
                  ecr.put_lifecycle_policy(
                    repositoryName=repository_name,
                    lifecyclePolicyText=lifecycle_policy
                  )
                
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                  'RepositoryUri': repository_uri,
                  'RepositoryName': repository_name,
                  'RepositoryExists': 'false'
                })
            except Exception as e:
              print(f"Error: {str(e)}")
              cfnresponse.send(event, context, cfnresponse.FAILED, {
                'Error': str(e)
              })

  # Custom resource that uses the Lambda function
  ECRRepository:
    Type: Custom::ECRRepository
    Properties:
      ServiceToken: !GetAtt ECRCheckLambda.Arn
      RepositoryName: streamlit-app
      LifecyclePolicy: |
        {
          "rules": [
            {
              "rulePriority": 1,
              "description": "Keep only the last 10 images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 10
              },
              "action": {
                "type": "expire"
              }
            }
          ]
        }

  # CodeBuild Service Role
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEKSClusterPolicy'
      Policies:
        - PolicyName: CodeBuildServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'eks:DescribeCluster'
                  - 'eks:ListClusters'
                  - 'eks:UpdateClusterConfig'
                  - 'eks:DescribeUpdate'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:PutImage'
                  - 'ecr:CreateRepository'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:ListImages'
                  - 'ecr:DeleteRepository'
                  - 'ecr:BatchDeleteImage'
                  - 'ecr:SetRepositoryPolicy'
                  - 'ecr:TagResource'
                  - 'ecr:PutLifecyclePolicy'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                  - 's3:CreateBucket'
                Resource: 
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}'
                  - !Sub 'arn:aws:s3:::kaniko-context-${AWS::AccountId}-${AWSRegion}/*'
                  - !Sub 'arn:aws:s3:::kaniko-context-${AWS::AccountId}-${AWSRegion}'

  # CodePipeline Service Role
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess'
      Policies:
        - PolicyName: CodePipelineServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                  - 's3:GetBucketVersioning'
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}'
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
              - Effect: Allow
                Action:
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuilds'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Ref GitHubTokenSecret

  # Lambda function to create a CodeStar connection
  GitHubConnectionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt GitHubConnectionLambdaRole.Arn
      Runtime: python3.9
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import os
          
          def handler(event, context):
            try:
              # Extract properties from the event
              props = event['ResourceProperties']
              secret_arn = props.get('SecretArn', '')
              owner = props.get('Owner', '')
              repo = props.get('Repo', '')
              branch = props.get('Branch', 'main')
              
              # Initialize clients
              secretsmanager = boto3.client('secretsmanager')
              
              # If deleting, just return success
              if event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                return
              
              # Get the GitHub token from Secrets Manager
              response = secretsmanager.get_secret_value(SecretId=secret_arn)
              token = response['SecretString']
              
              # Return the values needed for the CodePipeline source action
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                'Owner': owner,
                'Repo': repo,
                'Branch': branch,
                'OAuthToken': token[:100]  # Truncate to 100 chars for CodePipeline
              })
            except Exception as e:
              print(f"Error: {str(e)}")
              cfnresponse.send(event, context, cfnresponse.FAILED, {
                'Error': str(e)
              })

  # IAM role for the GitHub connection Lambda
  GitHubConnectionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Ref GitHubTokenSecret

  # Custom resource to handle GitHub connection
  GitHubConnection:
    Type: Custom::GitHubConnection
    Properties:
      ServiceToken: !GetAtt GitHubConnectionLambda.Arn
      SecretArn: !Ref GitHubTokenSecret
      Owner: !Ref GitHubOwner
      Repo: !Ref GitHubRepo
      Branch: !Ref GitHubBranch

  # S3 Bucket for Artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            ExpirationInDays: 30

  # CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-build'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_REGION
            Value: !Ref AWSRegion
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: EKS_CLUSTER_NAME
            Value: !Ref EksClusterName
      Source:
        Type: CODEPIPELINE
        BuildSpec: cicd/buildspec/buildspec.yml

  # CodePipeline
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${AWS::StackName}-pipeline'
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !GetAtt GitHubConnection.Owner
                Repo: !GetAtt GitHubConnection.Repo
                Branch: !GetAtt GitHubConnection.Branch
                OAuthToken: !GetAtt GitHubConnection.OAuthToken
              OutputArtifacts:
                - Name: SourceCode
        - Name: Build
          Actions:
            - Name: BuildAndDeploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceCode

Outputs:
  PipelineURL:
    Description: URL to the CodePipeline console
    Value: !Sub 'https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}'
  
  ECRRepositoryURL:
    Description: URL of the ECR Repository
    Value: !GetAtt ECRRepository.RepositoryUri 